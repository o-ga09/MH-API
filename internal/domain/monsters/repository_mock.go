// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package monsters

import (
	"context"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			RemoveFunc: func(ctx context.Context, monsterId string) error {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, m Monster) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, monsterId string) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, m Monster) error

	// calls tracks calls to the methods.
	calls struct {
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// MonsterId is the monsterId argument value.
			MonsterId string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M Monster
		}
	}
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
}

// Remove calls RemoveFunc.
func (mock *RepositoryMock) Remove(ctx context.Context, monsterId string) error {
	if mock.RemoveFunc == nil {
		panic("RepositoryMock.RemoveFunc: method is nil but Repository.Remove was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		MonsterId string
	}{
		Ctx:       ctx,
		MonsterId: monsterId,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, monsterId)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedRepository.RemoveCalls())
func (mock *RepositoryMock) RemoveCalls() []struct {
	Ctx       context.Context
	MonsterId string
} {
	var calls []struct {
		Ctx       context.Context
		MonsterId string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock) Save(ctx context.Context, m Monster) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   Monster
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, m)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedRepository.SaveCalls())
func (mock *RepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	M   Monster
} {
	var calls []struct {
		Ctx context.Context
		M   Monster
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
