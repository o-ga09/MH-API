// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package skills

import (
	"context"
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
//	func TestSomethingThatUsesRepository(t *testing.T) {
//
//		// make and configure a mocked Repository
//		mockedRepository := &RepositoryMock{
//			FindAllFunc: func(ctx context.Context) (Skills, error) {
//				panic("mock out the FindAll method")
//			},
//			FindByIdFunc: func(ctx context.Context, skillId string) (Skill, error) {
//				panic("mock out the FindById method")
//			},
//			RemoveFunc: func(ctx context.Context, skillId string) error {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, s Skill) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedRepository in code that requires Repository
//		// and then make assertions.
//
//	}
type RepositoryMock struct {
	// FindAllFunc mocks the FindAll method.
	FindAllFunc func(ctx context.Context) (Skills, error)

	// FindByIdFunc mocks the FindById method.
	FindByIdFunc func(ctx context.Context, skillId string) (Skill, error)

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, skillId string) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, s Skill) error

	// calls tracks calls to the methods.
	calls struct {
		// FindAll holds details about calls to the FindAll method.
		FindAll []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// FindById holds details about calls to the FindById method.
		FindById []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SkillId is the skillId argument value.
			SkillId string
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SkillId is the skillId argument value.
			SkillId string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// S is the s argument value.
			S Skill
		}
	}
	lockFindAll  sync.RWMutex
	lockFindById sync.RWMutex
	lockRemove   sync.RWMutex
	lockSave     sync.RWMutex
}

// FindAll calls FindAllFunc.
func (mock *RepositoryMock) FindAll(ctx context.Context) (Skills, error) {
	if mock.FindAllFunc == nil {
		panic("RepositoryMock.FindAllFunc: method is nil but Repository.FindAll was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockFindAll.Lock()
	mock.calls.FindAll = append(mock.calls.FindAll, callInfo)
	mock.lockFindAll.Unlock()
	return mock.FindAllFunc(ctx)
}

// FindAllCalls gets all the calls that were made to FindAll.
// Check the length with:
//
//	len(mockedRepository.FindAllCalls())
func (mock *RepositoryMock) FindAllCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockFindAll.RLock()
	calls = mock.calls.FindAll
	mock.lockFindAll.RUnlock()
	return calls
}

// FindById calls FindByIdFunc.
func (mock *RepositoryMock) FindById(ctx context.Context, skillId string) (Skill, error) {
	if mock.FindByIdFunc == nil {
		panic("RepositoryMock.FindByIdFunc: method is nil but Repository.FindById was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SkillId string
	}{
		Ctx:     ctx,
		SkillId: skillId,
	}
	mock.lockFindById.Lock()
	mock.calls.FindById = append(mock.calls.FindById, callInfo)
	mock.lockFindById.Unlock()
	return mock.FindByIdFunc(ctx, skillId)
}

// FindByIdCalls gets all the calls that were made to FindById.
// Check the length with:
//
//	len(mockedRepository.FindByIdCalls())
func (mock *RepositoryMock) FindByIdCalls() []struct {
	Ctx     context.Context
	SkillId string
} {
	var calls []struct {
		Ctx     context.Context
		SkillId string
	}
	mock.lockFindById.RLock()
	calls = mock.calls.FindById
	mock.lockFindById.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *RepositoryMock) Remove(ctx context.Context, skillId string) error {
	if mock.RemoveFunc == nil {
		panic("RepositoryMock.RemoveFunc: method is nil but Repository.Remove was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SkillId string
	}{
		Ctx:     ctx,
		SkillId: skillId,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, skillId)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedRepository.RemoveCalls())
func (mock *RepositoryMock) RemoveCalls() []struct {
	Ctx     context.Context
	SkillId string
} {
	var calls []struct {
		Ctx     context.Context
		SkillId string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *RepositoryMock) Save(ctx context.Context, s Skill) error {
	if mock.SaveFunc == nil {
		panic("RepositoryMock.SaveFunc: method is nil but Repository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		S   Skill
	}{
		Ctx: ctx,
		S:   s,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, s)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedRepository.SaveCalls())
func (mock *RepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	S   Skill
} {
	var calls []struct {
		Ctx context.Context
		S   Skill
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
