// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package weapons

import (
	"context"
	"mh-api/internal/domain/weapons"
	"sync"
)

// Ensure, that IWeaponQueryServiceMock does implement IWeaponQueryService.
// If this is not the case, regenerate this file with moq.
var _ IWeaponQueryService = &IWeaponQueryServiceMock{}

// IWeaponQueryServiceMock is a mock implementation of IWeaponQueryService.
//
//	func TestSomethingThatUsesIWeaponQueryService(t *testing.T) {
//
//		// make and configure a mocked IWeaponQueryService
//		mockedIWeaponQueryService := &IWeaponQueryServiceMock{
//			FindWeaponsFunc: func(ctx context.Context, params SearchWeaponsParams) ([]*weapons.Weapon, int, error) {
//				panic("mock out the FindWeapons method")
//			},
//		}
//
//		// use mockedIWeaponQueryService in code that requires IWeaponQueryService
//		// and then make assertions.
//
//	}
type IWeaponQueryServiceMock struct {
	// FindWeaponsFunc mocks the FindWeapons method.
	FindWeaponsFunc func(ctx context.Context, params SearchWeaponsParams) ([]*weapons.Weapon, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// FindWeapons holds details about calls to the FindWeapons method.
		FindWeapons []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params SearchWeaponsParams
		}
	}
	lockFindWeapons sync.RWMutex
}

// FindWeapons calls FindWeaponsFunc.
func (mock *IWeaponQueryServiceMock) FindWeapons(ctx context.Context, params SearchWeaponsParams) ([]*weapons.Weapon, int, error) {
	if mock.FindWeaponsFunc == nil {
		panic("IWeaponQueryServiceMock.FindWeaponsFunc: method is nil but IWeaponQueryService.FindWeapons was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params SearchWeaponsParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockFindWeapons.Lock()
	mock.calls.FindWeapons = append(mock.calls.FindWeapons, callInfo)
	mock.lockFindWeapons.Unlock()
	return mock.FindWeaponsFunc(ctx, params)
}

// FindWeaponsCalls gets all the calls that were made to FindWeapons.
// Check the length with:
//
//	len(mockedIWeaponQueryService.FindWeaponsCalls())
func (mock *IWeaponQueryServiceMock) FindWeaponsCalls() []struct {
	Ctx    context.Context
	Params SearchWeaponsParams
} {
	var calls []struct {
		Ctx    context.Context
		Params SearchWeaponsParams
	}
	mock.lockFindWeapons.RLock()
	calls = mock.calls.FindWeapons
	mock.lockFindWeapons.RUnlock()
	return calls
}
