// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package monsters

import (
	"context"
	"sync"
)

// Ensure, that IMonsterServiceMock does implement IMonsterService.
// If this is not the case, regenerate this file with moq.
var _ IMonsterService = &IMonsterServiceMock{}

// IMonsterServiceMock is a mock implementation of IMonsterService.
//
//	func TestSomethingThatUsesIMonsterService(t *testing.T) {
//
//		// make and configure a mocked IMonsterService
//		mockedIMonsterService := &IMonsterServiceMock{
//			FetchMonsterDetailFunc: func(ctx context.Context, id string) ([]*FetchMonsterListDto, error) {
//				panic("mock out the FetchMonsterDetail method")
//			},
//		}
//
//		// use mockedIMonsterService in code that requires IMonsterService
//		// and then make assertions.
//
//	}
type IMonsterServiceMock struct {
	// FetchMonsterDetailFunc mocks the FetchMonsterDetail method.
	FetchMonsterDetailFunc func(ctx context.Context, id string) ([]*FetchMonsterListDto, error)

	// calls tracks calls to the methods.
	calls struct {
		// FetchMonsterDetail holds details about calls to the FetchMonsterDetail method.
		FetchMonsterDetail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ID is the id argument value.
			ID string
		}
	}
	lockFetchMonsterDetail sync.RWMutex
}

// FetchMonsterDetail calls FetchMonsterDetailFunc.
func (mock *IMonsterServiceMock) FetchMonsterDetail(ctx context.Context, id string) ([]*FetchMonsterListDto, error) {
	if mock.FetchMonsterDetailFunc == nil {
		panic("IMonsterServiceMock.FetchMonsterDetailFunc: method is nil but IMonsterService.FetchMonsterDetail was just called")
	}
	callInfo := struct {
		Ctx context.Context
		ID  string
	}{
		Ctx: ctx,
		ID:  id,
	}
	mock.lockFetchMonsterDetail.Lock()
	mock.calls.FetchMonsterDetail = append(mock.calls.FetchMonsterDetail, callInfo)
	mock.lockFetchMonsterDetail.Unlock()
	return mock.FetchMonsterDetailFunc(ctx, id)
}

// FetchMonsterDetailCalls gets all the calls that were made to FetchMonsterDetail.
// Check the length with:
//
//	len(mockedIMonsterService.FetchMonsterDetailCalls())
func (mock *IMonsterServiceMock) FetchMonsterDetailCalls() []struct {
	Ctx context.Context
	ID  string
} {
	var calls []struct {
		Ctx context.Context
		ID  string
	}
	mock.lockFetchMonsterDetail.RLock()
	calls = mock.calls.FetchMonsterDetail
	mock.lockFetchMonsterDetail.RUnlock()
	return calls
}
