// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package skills

import (
	"context"
	"sync"
)

// Ensure, that ISkillServiceMock does implement ISkillService.
// If this is not the case, regenerate this file with moq.
var _ ISkillService = &ISkillServiceMock{}

// ISkillServiceMock is a mock implementation of ISkillService.
//
//	func TestSomethingThatUsesISkillService(t *testing.T) {
//
//		// make and configure a mocked ISkillService
//		mockedISkillService := &ISkillServiceMock{
//			GetAllSkillsFunc: func(ctx context.Context) (*SkillListResponseDTO, error) {
//				panic("mock out the GetAllSkills method")
//			},
//			GetSkillByIDFunc: func(ctx context.Context, skillID string) (*SkillDTO, error) {
//				panic("mock out the GetSkillByID method")
//			},
//		}
//
//		// use mockedISkillService in code that requires ISkillService
//		// and then make assertions.
//
//	}
type ISkillServiceMock struct {
	// GetAllSkillsFunc mocks the GetAllSkills method.
	GetAllSkillsFunc func(ctx context.Context) (*SkillListResponseDTO, error)

	// GetSkillByIDFunc mocks the GetSkillByID method.
	GetSkillByIDFunc func(ctx context.Context, skillID string) (*SkillDTO, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllSkills holds details about calls to the GetAllSkills method.
		GetAllSkills []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetSkillByID holds details about calls to the GetSkillByID method.
		GetSkillByID []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SkillID is the skillID argument value.
			SkillID string
		}
	}
	lockGetAllSkills sync.RWMutex
	lockGetSkillByID sync.RWMutex
}

// GetAllSkills calls GetAllSkillsFunc.
func (mock *ISkillServiceMock) GetAllSkills(ctx context.Context) (*SkillListResponseDTO, error) {
	if mock.GetAllSkillsFunc == nil {
		panic("ISkillServiceMock.GetAllSkillsFunc: method is nil but ISkillService.GetAllSkills was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllSkills.Lock()
	mock.calls.GetAllSkills = append(mock.calls.GetAllSkills, callInfo)
	mock.lockGetAllSkills.Unlock()
	return mock.GetAllSkillsFunc(ctx)
}

// GetAllSkillsCalls gets all the calls that were made to GetAllSkills.
// Check the length with:
//
//	len(mockedISkillService.GetAllSkillsCalls())
func (mock *ISkillServiceMock) GetAllSkillsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllSkills.RLock()
	calls = mock.calls.GetAllSkills
	mock.lockGetAllSkills.RUnlock()
	return calls
}

// GetSkillByID calls GetSkillByIDFunc.
func (mock *ISkillServiceMock) GetSkillByID(ctx context.Context, skillID string) (*SkillDTO, error) {
	if mock.GetSkillByIDFunc == nil {
		panic("ISkillServiceMock.GetSkillByIDFunc: method is nil but ISkillService.GetSkillByID was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		SkillID string
	}{
		Ctx:     ctx,
		SkillID: skillID,
	}
	mock.lockGetSkillByID.Lock()
	mock.calls.GetSkillByID = append(mock.calls.GetSkillByID, callInfo)
	mock.lockGetSkillByID.Unlock()
	return mock.GetSkillByIDFunc(ctx, skillID)
}

// GetSkillByIDCalls gets all the calls that were made to GetSkillByID.
// Check the length with:
//
//	len(mockedISkillService.GetSkillByIDCalls())
func (mock *ISkillServiceMock) GetSkillByIDCalls() []struct {
	Ctx     context.Context
	SkillID string
} {
	var calls []struct {
		Ctx     context.Context
		SkillID string
	}
	mock.lockGetSkillByID.RLock()
	calls = mock.calls.GetSkillByID
	mock.lockGetSkillByID.RUnlock()
	return calls
}
