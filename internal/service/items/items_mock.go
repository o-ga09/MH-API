// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package items

import (
	"context"
	"sync"
)

// Ensure, that IitemServiceMock does implement IitemService.
// If this is not the case, regenerate this file with moq.
var _ IitemService = &IitemServiceMock{}

// IitemServiceMock is a mock implementation of IitemService.
//
//	func TestSomethingThatUsesIitemService(t *testing.T) {
//
//		// make and configure a mocked IitemService
//		mockedIitemService := &IitemServiceMock{
//			GetAllItemsFunc: func(ctx context.Context) (*ItemListResponseDTO, error) {
//				panic("mock out the GetAllItems method")
//			},
//		}
//
//		// use mockedIitemService in code that requires IitemService
//		// and then make assertions.
//
//	}
type IitemServiceMock struct {
	// GetAllItemsFunc mocks the GetAllItems method.
	GetAllItemsFunc func(ctx context.Context) (*ItemListResponseDTO, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAllItems holds details about calls to the GetAllItems method.
		GetAllItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetAllItems sync.RWMutex
}

// GetAllItems calls GetAllItemsFunc.
func (mock *IitemServiceMock) GetAllItems(ctx context.Context) (*ItemListResponseDTO, error) {
	if mock.GetAllItemsFunc == nil {
		panic("IitemServiceMock.GetAllItemsFunc: method is nil but IitemService.GetAllItems was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetAllItems.Lock()
	mock.calls.GetAllItems = append(mock.calls.GetAllItems, callInfo)
	mock.lockGetAllItems.Unlock()
	return mock.GetAllItemsFunc(ctx)
}

// GetAllItemsCalls gets all the calls that were made to GetAllItems.
// Check the length with:
//
//	len(mockedIitemService.GetAllItemsCalls())
func (mock *IitemServiceMock) GetAllItemsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetAllItems.RLock()
	calls = mock.calls.GetAllItems
	mock.lockGetAllItems.RUnlock()
	return calls
}
