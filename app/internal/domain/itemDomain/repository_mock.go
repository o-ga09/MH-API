// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package itemdomain

import (
	"context"
	"sync"
)

// Ensure, that ItemRepositoryMock does implement ItemRepository.
// If this is not the case, regenerate this file with moq.
var _ ItemRepository = &ItemRepositoryMock{}

// ItemRepositoryMock is a mock implementation of ItemRepository.
//
//	func TestSomethingThatUsesItemRepository(t *testing.T) {
//
//		// make and configure a mocked ItemRepository
//		mockedItemRepository := &ItemRepositoryMock{
//			RemoveFunc: func(ctx context.Context, itemId string) error {
//				panic("mock out the Remove method")
//			},
//			SaveFunc: func(ctx context.Context, m Item) error {
//				panic("mock out the Save method")
//			},
//		}
//
//		// use mockedItemRepository in code that requires ItemRepository
//		// and then make assertions.
//
//	}
type ItemRepositoryMock struct {
	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, itemId string) error

	// SaveFunc mocks the Save method.
	SaveFunc func(ctx context.Context, m Item) error

	// calls tracks calls to the methods.
	calls struct {
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemId is the itemId argument value.
			ItemId string
		}
		// Save holds details about calls to the Save method.
		Save []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// M is the m argument value.
			M Item
		}
	}
	lockRemove sync.RWMutex
	lockSave   sync.RWMutex
}

// Remove calls RemoveFunc.
func (mock *ItemRepositoryMock) Remove(ctx context.Context, itemId string) error {
	if mock.RemoveFunc == nil {
		panic("ItemRepositoryMock.RemoveFunc: method is nil but ItemRepository.Remove was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemId string
	}{
		Ctx:    ctx,
		ItemId: itemId,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, itemId)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//
//	len(mockedItemRepository.RemoveCalls())
func (mock *ItemRepositoryMock) RemoveCalls() []struct {
	Ctx    context.Context
	ItemId string
} {
	var calls []struct {
		Ctx    context.Context
		ItemId string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Save calls SaveFunc.
func (mock *ItemRepositoryMock) Save(ctx context.Context, m Item) error {
	if mock.SaveFunc == nil {
		panic("ItemRepositoryMock.SaveFunc: method is nil but ItemRepository.Save was just called")
	}
	callInfo := struct {
		Ctx context.Context
		M   Item
	}{
		Ctx: ctx,
		M:   m,
	}
	mock.lockSave.Lock()
	mock.calls.Save = append(mock.calls.Save, callInfo)
	mock.lockSave.Unlock()
	return mock.SaveFunc(ctx, m)
}

// SaveCalls gets all the calls that were made to Save.
// Check the length with:
//
//	len(mockedItemRepository.SaveCalls())
func (mock *ItemRepositoryMock) SaveCalls() []struct {
	Ctx context.Context
	M   Item
} {
	var calls []struct {
		Ctx context.Context
		M   Item
	}
	mock.lockSave.RLock()
	calls = mock.calls.Save
	mock.lockSave.RUnlock()
	return calls
}
