// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package items

import (
	"context"
	"sync"
)

// Ensure, that ItemQueryServiceMock does implement ItemQueryService.
// If this is not the case, regenerate this file with moq.
var _ ItemQueryService = &ItemQueryServiceMock{}

// ItemQueryServiceMock is a mock implementation of ItemQueryService.
//
//	func TestSomethingThatUsesItemQueryService(t *testing.T) {
//
//		// make and configure a mocked ItemQueryService
//		mockedItemQueryService := &ItemQueryServiceMock{
//			GetItemFunc: func(ctx context.Context, itemId string) (*ItemDto, error) {
//				panic("mock out the GetItem method")
//			},
//			GetItemsFunc: func(ctx context.Context) ([]*ItemDto, error) {
//				panic("mock out the GetItems method")
//			},
//			GetItemsByMonsterFunc: func(ctx context.Context, itemId string) (*ItemsByMonster, error) {
//				panic("mock out the GetItemsByMonster method")
//			},
//		}
//
//		// use mockedItemQueryService in code that requires ItemQueryService
//		// and then make assertions.
//
//	}
type ItemQueryServiceMock struct {
	// GetItemFunc mocks the GetItem method.
	GetItemFunc func(ctx context.Context, itemId string) (*ItemDto, error)

	// GetItemsFunc mocks the GetItems method.
	GetItemsFunc func(ctx context.Context) ([]*ItemDto, error)

	// GetItemsByMonsterFunc mocks the GetItemsByMonster method.
	GetItemsByMonsterFunc func(ctx context.Context, itemId string) (*ItemsByMonster, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetItem holds details about calls to the GetItem method.
		GetItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemId is the itemId argument value.
			ItemId string
		}
		// GetItems holds details about calls to the GetItems method.
		GetItems []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// GetItemsByMonster holds details about calls to the GetItemsByMonster method.
		GetItemsByMonster []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ItemId is the itemId argument value.
			ItemId string
		}
	}
	lockGetItem           sync.RWMutex
	lockGetItems          sync.RWMutex
	lockGetItemsByMonster sync.RWMutex
}

// GetItem calls GetItemFunc.
func (mock *ItemQueryServiceMock) GetItem(ctx context.Context, itemId string) (*ItemDto, error) {
	if mock.GetItemFunc == nil {
		panic("ItemQueryServiceMock.GetItemFunc: method is nil but ItemQueryService.GetItem was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemId string
	}{
		Ctx:    ctx,
		ItemId: itemId,
	}
	mock.lockGetItem.Lock()
	mock.calls.GetItem = append(mock.calls.GetItem, callInfo)
	mock.lockGetItem.Unlock()
	return mock.GetItemFunc(ctx, itemId)
}

// GetItemCalls gets all the calls that were made to GetItem.
// Check the length with:
//
//	len(mockedItemQueryService.GetItemCalls())
func (mock *ItemQueryServiceMock) GetItemCalls() []struct {
	Ctx    context.Context
	ItemId string
} {
	var calls []struct {
		Ctx    context.Context
		ItemId string
	}
	mock.lockGetItem.RLock()
	calls = mock.calls.GetItem
	mock.lockGetItem.RUnlock()
	return calls
}

// GetItems calls GetItemsFunc.
func (mock *ItemQueryServiceMock) GetItems(ctx context.Context) ([]*ItemDto, error) {
	if mock.GetItemsFunc == nil {
		panic("ItemQueryServiceMock.GetItemsFunc: method is nil but ItemQueryService.GetItems was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetItems.Lock()
	mock.calls.GetItems = append(mock.calls.GetItems, callInfo)
	mock.lockGetItems.Unlock()
	return mock.GetItemsFunc(ctx)
}

// GetItemsCalls gets all the calls that were made to GetItems.
// Check the length with:
//
//	len(mockedItemQueryService.GetItemsCalls())
func (mock *ItemQueryServiceMock) GetItemsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetItems.RLock()
	calls = mock.calls.GetItems
	mock.lockGetItems.RUnlock()
	return calls
}

// GetItemsByMonster calls GetItemsByMonsterFunc.
func (mock *ItemQueryServiceMock) GetItemsByMonster(ctx context.Context, itemId string) (*ItemsByMonster, error) {
	if mock.GetItemsByMonsterFunc == nil {
		panic("ItemQueryServiceMock.GetItemsByMonsterFunc: method is nil but ItemQueryService.GetItemsByMonster was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		ItemId string
	}{
		Ctx:    ctx,
		ItemId: itemId,
	}
	mock.lockGetItemsByMonster.Lock()
	mock.calls.GetItemsByMonster = append(mock.calls.GetItemsByMonster, callInfo)
	mock.lockGetItemsByMonster.Unlock()
	return mock.GetItemsByMonsterFunc(ctx, itemId)
}

// GetItemsByMonsterCalls gets all the calls that were made to GetItemsByMonster.
// Check the length with:
//
//	len(mockedItemQueryService.GetItemsByMonsterCalls())
func (mock *ItemQueryServiceMock) GetItemsByMonsterCalls() []struct {
	Ctx    context.Context
	ItemId string
} {
	var calls []struct {
		Ctx    context.Context
		ItemId string
	}
	mock.lockGetItemsByMonster.RLock()
	calls = mock.calls.GetItemsByMonster
	mock.lockGetItemsByMonster.RUnlock()
	return calls
}
